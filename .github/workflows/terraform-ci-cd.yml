name: Terraform CI/CD

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - docs/**.md
      - "*.md"

jobs:
  terraform_linter:
    runs-on: ubuntu-latest
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: "Terraform Linter Check (Formatting)"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.21
          tf_actions_subcommand: fmt
          tf_actions_working_dir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_CLI_ARGS: -recursive
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - uses: actions/setup-go@v1
        with:
          go-version: "1.14" # The Go version to download (if necessary) and use.
      - name: "Terraform Code Standards Check"
        run: |
          GO111MODULE="off" go get github.com/segmentio/terraform-docs
          export PATH=$HOME/go/bin:$PATH
          pip3 install --pre slalom.dataops
          s-infra check_tf_metadata ./catalog \
              --check_module_headers \
              --required_input_vars=[name_prefix,resource_tags,environment] \
              --required_output_vars=[summary] \
              --nocheck_input_description \
              --nocheck_output_description \
              --raise_error
          s-infra check_tf_metadata ./components \
              --check_module_headers \
              --required_input_vars=[name_prefix,resource_tags,environment] \
              --required_output_vars=[] \
              --nocheck_input_description \
              --nocheck_output_description \
              --raise_error

  tf_test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        # python-version: [3.7]
        sample-id:
          - airflow-on-aws
          - dbt-and-singer-on-aws
          - redshift-dw
          - s3-lambda-trigger
          - secrets-manager-on-aws
          - tableau-on-aws
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: "Terraform Init (Prerun)"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.21
          tf_actions_subcommand: init
          tf_actions_working_dir: ./catalog/aws/prereqs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS_backend: false
          TF_VAR_aws_region: us-east-2
          TF_VAR_project_shortname: CI-Test-1234-${{ matrix.sample-id }}
      - name: "Terraform Init (Sample #${{ matrix.sample-id }})"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.21
          tf_actions_subcommand: init
          tf_actions_working_dir: ./samples/${{ matrix.sample-id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS_backend: false
      - name: "Terraform Validate (Sample #${{ matrix.sample-id }})"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.21
          tf_actions_subcommand: validate
          tf_actions_working_dir: ./samples/${{ matrix.sample-id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS_backend: false
